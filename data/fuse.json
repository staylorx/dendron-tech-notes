{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Welcome to Tech Notes\n\nThis was originally stood up to collect gists from github, snippets from gitlab, and any other bits and bobbles spread across the SVCs of my business.","n":0.183}}},{"i":2,"$":{"0":{"v":"Templates","n":1}}},{"i":3,"$":{"0":{"v":"Task List","n":0.707},"1":{"v":"\n### Important:\n\n- [x] Item 1\n- [ ] Item 2\n\n### Planned:\n\n- [ ] Item 1\n- [ ] Item 2","n":0.236}}},{"i":4,"$":{"0":{"v":"Project","n":1},"1":{"v":"\n## Goal\n<!-- What are you trying to accomplish -->\n\n## Context\n<!-- Background information -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Lookup\n<!-- relevant prior work or resources -->\n","n":0.105}}},{"i":5,"$":{"0":{"v":"Writing","n":1},"1":{"v":"\n## Goal\n<!-- What are you trying to accomplish -->\n\n## Context\n<!-- Background information -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Lookup\n<!-- relevant prior work or resources -->\n- [[proj.]]\n- [[proj..outline]]\n- [[proj..v1]]\n- [[proj..v2]]\n- [[proj..v3]]","n":0.103}}},{"i":6,"$":{"0":{"v":"People","n":1},"1":{"v":"\n## Summary\n\n## First Encounter\n\n## Work\n\n### Current\n- position:\n- place:\n- start:\n- end:\n- location:\n\n### Past\n\n","n":0.289}}},{"i":7,"$":{"0":{"v":"Daily Journal Template","n":0.577},"1":{"v":"This template was applied using the daily journal schema. Edit the [[templates.daily]] note to change this template.\nTo create your own schemas to auto-apply templates when they match a hierarchy, follow the [schema tutorial](https://blog.dendron.so/notes/P1DL2uXHpKUCa7hLiFbFA/) to get started.\n\n<!--\nBased on the journaling method created by Intelligent Change:\n- [Intelligent Change: Our Story](https://www.intelligentchange.com/pages/our-story)\n- [The Five Minute Journal](https://www.intelligentchange.com/products/the-five-minute-journal)\n-->\n\n## Morning\n\n<!-- Fill out this section after waking up -->\n\n### Gratitude\n\nI am grateful for:\n\n1.\n2.\n3.\n\n### What would make today great?\n\n1.\n2.\n3.\n\n### Daily affirmations\n\nI am...\n\n## Evening\n\n<!-- Fill out this section before going to sleep, reflecting on your day -->\n\n### Amazing things that happened today\n\n1.\n2.\n3.\n\n### How could I have made today even better?\n\nI could have made today better by\n","n":0.097}}},{"i":8,"$":{"0":{"v":"Tools","n":1}}},{"i":9,"$":{"0":{"v":"Kubernetes","n":1}}},{"i":10,"$":{"0":{"v":"Rke2","n":1}}},{"i":11,"$":{"0":{"v":"Install","n":1},"1":{"v":"\n## For all machines\n\nCreate a folder for the config file.\n\n```bash\nmkdir -p /etc/rancher/rke2\ncd /etc/rancher/rke2\n```\n\nCreate a file `registries.yaml`,\n\n```yaml\nmirrors:\n  docker.io:\n    endpoint:\n      - \"http://192.168.1.11:8880\"\n```\n\n## Create Masters\n\nCreate a file `config.yaml`,\n\n```yaml\ntoken: your_secret_token\n# Commented for the first master, but uncomment this for extra masters\n# server: https://kubernetes.local:9345\ntls-san:\n  - kubernetes.local\n  - 127.0.0.1\ncluster-cidr: \"10.42.0.0/16\"\nservice-cidr: \"10.43.0.0/16\"\nnode-taint:\n  - \"CriticalAddonsOnly=true:NoExecute\"\ndisable-cloud-controller: true\n# debug: true\ncni:\n  - calico\n```\n\nInstall the bins for master,\n\n    curl -sfL https://get.rke2.io | INSTALL_RKE2_CHANNEL=v1.24 sh -\n    systemctl enable rke2-server.service\n\nStart the service,\n    systemctl start rke2-server.service\n\n\n## Workers\n\nCreate config.yaml files,\n\n```yaml\ntoken: your_secret_token\nserver: https://kubernetes.local:9345\n# debug: true\n```\n\nInstall the bins for workers,\n\n    curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=\"agent\" INSTALL_RKE2_CHANNEL=v1.24 sh -\n    systemctl enable rke2-agent.service\n\nStart the service,\n    systemctl start rke2-agent.service\n    \n## Airgap note\n\nI airgap install quite a bit since bandwitdh can be precious and docker hub's ultimately not free.\n\nTo cache the images copy the files from the release, e.g., https://github.com/rancher/rke2/releases/download/v1.24.3%2Brke2r1/rke2-images-all.linux-amd64.txt.\n\n\nCreate a script to pre-pull each of the images. The following assumes the downloaded images file above is called `rancher_images_file.txt`. It also assumes your docker deamon has been configured to use [[Mirrors|tools.nexus.mirrors]].\n\n```bash\n#!/usr/bin/env bash\n\nwhile read p; do\n  docker pull \"$p\" \ndone <rancher_images_file.txt\n```","n":0.077}}},{"i":12,"$":{"0":{"v":"Vagrant","n":1},"1":{"v":"\nI create vagrant files often. This file creates a Fedora version: [[assets\\files\\cache_images.sh]]","n":0.289}}},{"i":13,"$":{"0":{"v":"Nexus","n":1},"1":{"v":"\nI've used Artifactory and like it fine. For personal use, and the occasional small business, I like [Sonatype's Nexus3](https://www.sonatype.com/products/nexus-repository).","n":0.229}}},{"i":14,"$":{"0":{"v":"Mirrors","n":1},"1":{"v":"\n## Mirror Maven repos for Gradle\n\nIn the `$USERHOME/.gradle/init.gradle` file,\n\n```\nallprojects {\n    buildscript {\n        repositories {\n            mavenLocal()\n            maven { \n                url \"http://192.168.1.11:8088/repository/maven-public/\" \n                allowInsecureProtocol = true\n            }\n        }\n    }\n\n    repositories {\n        mavenLocal()\n        maven { \n            url \"http://192.168.1.11:8088/repository/maven-public/\" \n            allowInsecureProtocol = true\n        }\n    }\n}\n```\n\n## Mirror Maven repos for Maven (pom.xml)\n\nIn the `$USERHOME/.m2/settings.xml` file,\n\n```\n<settings>\n  <mirrors>\n    <mirror>\n      <!--This sends everything else to /public -->\n      <id>nexus</id>\n      <mirrorOf>*</mirrorOf>\n      <url>http://192.168.1.11:8088/repository/maven-public/</url>\n    </mirror>\n  </mirrors>\n  <profiles>\n    <profile>\n      <id>nexus</id>\n      <!--Enable snapshots for the built in central repo to direct -->\n      <!--all requests to nexus via the mirror -->\n      <repositories>\n        <repository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases><enabled>true</enabled></releases>\n          <snapshots><enabled>true</enabled></snapshots>\n        </repository>\n      </repositories>\n     <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases><enabled>true</enabled></releases>\n          <snapshots><enabled>true</enabled></snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <!--make the profile active all the time -->\n    <activeProfile>nexus</activeProfile>\n  </activeProfiles>\n</settings>\n```\n\n## Mirror PyPi, for instance\n\nCreate the following in a `pip.ini` or `pip.conf` file. In Conda&mdash;where I tend to use this the most&mdash;place the file in each environment folder and it works great.\n\n```ini\n[global]\nuse-mirrors=true\nmirrors=http://192.168.1.11:8088/repository/pypi/\nindex-url=http://192.168.1.11:8088/repository/pypi/simple/\ntrusted-host=192.168.1.11\n```\n\n## local registry conf for podman containers folder\n\n_Note the 8880 has been configured as a docker repo, not a normal maven, npm, or yum repo. Those are on 8088_\n\n```ini\n#/etc/containers/registries.conf\n\n#...\n[registries.search]\nregistries = ['192.168.1.11:8880']\n\n[registries.insecure]\nregistries = ['192.168.1.11:8880']\n#...\n```\n\n## Docker desktop on Windows\n\n```json\n{\n  \"builder\": {\n    \"gc\": {\n      \"defaultKeepStorage\": \"20GB\",\n      \"enabled\": true\n    }\n  },\n  \"experimental\": false,\n  \"features\": {\n    \"buildkit\": true\n  },\n  \"insecure-registries\": [\n    \"192.168.1.11\"\n  ],\n  \"max-concurrent-downloads\": 1,\n  \"registry-mirrors\": [\n    \"http://192.168.1.11:8880\"\n  ]\n}\n```\n\n\nOnce this is configured, I run a script (here: [[assets\\files\\cache_images.sh]]) from time to time to ensure I have the latest versions in the proxy. \n","n":0.066}}},{"i":15,"$":{"0":{"v":"Endpoints","n":1},"1":{"v":"\n## Endpoints\n\n### Flutter\n\nTo fetch the latest Flutter: http://192.168.1.11:8088/repository/google-flutter-releases/stable/windows/flutter_windows_3.0.5-stable.zip\n\n### k0s\n\nFetch k0s binary through local cache server\n\n```\n#!/usr/bin/env sh\n \nversion=\"v0.7.0\"\narch=\"amd64\"\ncurl -L http://192.168.1.11:8088/repository/raw-github-k0s-proxy/$version/k0s-$version-$arch --output k0s\n```\n\n","n":0.218}}},{"i":16,"$":{"0":{"v":"Docker","n":1},"1":{"v":"\n## Normal Use\n\nThe admin console is found here: http://192.168.1.11:8088/\n\n## Install\n\nUsing the Docker on a Synology NAS is easy. I'm sure this can be done via the Docker package in the front-end, but I find it easiest to SSH into the NAS itself, then run the following bits from the command prompt.\n\nWe only need to create the volume once:\n\n    sudo docker volume create --name nexus-data\n\n## Update\nI do the pull from time to time to ensure I always have the latest, and if something new pulls in then I recreate a container:\n\n    sudo docker pull sonatype/nexus3\n\nOnce a latest image is pulled, I forcibly remove the container, then recreate it. A bit agressive, but for a single docker container and the NAS it works fine.\n\n```\nsudo docker rm -f nexus  \n# port 8880 for docker\nsudo docker run -d --restart always -p 8088:8081 -p 8880:8880 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n```\n","n":0.083}}},{"i":17,"$":{"0":{"v":"MacOS","n":1},"1":{"v":"\nTools for working with MacOS\n\nSick.Codes -- Create a MacOS machine using Docker Desktop: https://hub.docker.com/r/sickcodes/docker-osx\n\nOSX-PROXMOX &mdash; Create a MacOS machine using a Proxmox VM: https://github.com/staylorx/OSX-PROXMOX\n","n":0.204}}}]}
